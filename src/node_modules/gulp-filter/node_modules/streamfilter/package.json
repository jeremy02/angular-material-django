{
  "name": "streamfilter",
  "version": "1.0.5",
  "description": "Filtering streams.",
  "main": "src/index.js",
  "scripts": {
    "test": "mocha tests/*.mocha.js",
    "coveralls": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha --report lcovonly -- tests/*.mocha.js -R spec -t 5000 && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "cover": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha --report html -- tests/*.mocha.js -R spec -t 5000",
    "lint": "eslint **/*.s",
    "cli": "env NPM_RUN_CLI=1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:nfroidure/streamfilter.git"
  },
  "keywords": [
    "assert",
    "deepEqual",
    "neat"
  ],
  "author": {
    "name": "Nicolas Froidure"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nfroidure/streamfilter/issues"
  },
  "homepage": "https://github.com/nfroidure/streamfilter",
  "devDependencies": {
    "coveralls": "^2.11.3",
    "eslint": "^1.0.0",
    "istanbul": "^0.3.17",
    "mocha": "^2.2.5",
    "sf-lint": "^1.0.2",
    "streamtest": "^1.2.1"
  },
  "dependencies": {
    "readable-stream": "^2.0.2"
  },
  "readme": "# streamfilter\n\n`streamfilter` is a function based filter for streams inspired per gulp-filter\n but no limited to Gulp nor to objectMode streams.\n\n[![NPM version](https://badge.fury.io/js/streamfilter.png)](https://npmjs.org/package/streamfilter) [![Build status](https://secure.travis-ci.org/nfroidure/streamfilter.png)](https://travis-ci.org/nfroidure/streamfilter) [![Dependency Status](https://david-dm.org/nfroidure/streamfilter.png)](https://david-dm.org/nfroidure/streamfilter) [![devDependency Status](https://david-dm.org/nfroidure/streamfilter/dev-status.png)](https://david-dm.org/nfroidure/streamfilter#info=devDependencies) [![Coverage Status](https://coveralls.io/repos/nfroidure/streamfilter/badge.png?branch=master)](https://coveralls.io/r/nfroidure/streamfilter?branch=master) [![Code Climate](https://codeclimate.com/github/nfroidure/streamfilter.png)](https://codeclimate.com/github/nfroidure/streamfilter)\n\n## Installation\n\nFirst install `streamfilter` in you project:\n```sh\nnpm install --save streamfilter\n```\n\n## Getting started\n\nThere are 3 scenarios of use :\n\n### Simple filter\n\n```js\nvar FilterStream = require('streamfilter');\n\nvar filter = new FilterStream(function(chunk, encoding, cb) {\n  if(itmustbefiltered) {\n    cb(true);\n  } else {\n    cb(false);\n  }\n});\n\n// Print to stdout a filtered stdin\nprocess.stdin\n  .pipe(filter)\n  .pipe(process.stdout);\n```\n\n### Filter and restore\n\n```js\nvar FilterStream = require('streamfilter');\n\nvar filter = new FilterStream(function(chunk, encoding, cb) {\n    if(itmustbefiltered) {\n      cb(true);\n    } else {\n      cb(false);\n    }\n}, {\n  restore: true\n});\n\n// Print accepted chunks in stdout\nfilter.pipe(process.stdout);\n\n// Print filtered one to stderr\nfilter.restore.pipe(process.stderr);\n```\n\n### Filter and restore as a passthrough stream\nLet's be hype!\n\n```js\nvar FilterStream = require('streamfilter');\n\n// Filter values\nvar filter = new FilterStream(function(chunk, encoding, cb) {\n    if(itmustbefiltered) {\n      cb(true);\n    } else {\n      cb(false);\n    }\n}, {\n  restore: true,\n  passthrough: true\n});\n\n// Pipe stdin\nprocess.stdin.pipe(filter)\n  // Edit kept chunks\n  .pipe(mySuperTransformStream)\n  // Restore filtered chunks\n  .pipe(filter.restore)\n  // and output!\n  .pipe(process.stdout)\n```\n\nNote that in this case, this is *your* responsibility to end the restore stream\n by piping in another stream or ending him manually.\n\n## API\n\n### stream:Stream FilterStream(filterCallback:Function, options:Object)\n\nFilter piped in streams according to the given `filterCallback` that takes the\n following arguments: `chunk` the actual chunk, `encoding` the chunk encoding,\n `filterResultCallback` the function to call as the result of the filtering\n process with `true` in argument to filter her or `false` otherwise.\n\nOptions are passed in as is in the various stream instances spawned by this\n module. So, to use the objectMode, simply pass in the `options.objectMode`\n value set to `true`.\n\n#### options.restore\nSet to `true`, this option create a readable stream allowing you to use the\n filtered chunks elsewhere. The restore stream is exposed in the `FilterStream`\n instance as a `restore` named property.\n\n#### options.passthrough\nSet to `true`, this option change the restore stream nature from a readable\n stream to a passthrough one, allowing you to reuse the filtered chunks in an\n existing pipeline.\n\n## Contribute\n\nFeel free to submit us your improvements. To do so, you must accept to publish\n your code under the MIT license.\n\nTo start contributing, first run the following to setup the development\n environment:\n```sh\ngit clone git@github.com:nfroidure/streamfilter.git\ncd streamfilter\nnpm install\n```\n\nThen, run the tests:\n```sh\nnpm test\n```\n\n## Stats\n[![NPM](https://nodei.co/npm/streamfilter.png?downloads=true&stars=true)](https://nodei.co/npm/streamfilter/)\n[![NPM](https://nodei.co/npm-dl/streamfilter.png)](https://nodei.co/npm/streamfilter/)\n\n",
  "readmeFilename": "README.md",
  "_id": "streamfilter@1.0.5",
  "_from": "streamfilter@^1.0.5"
}
