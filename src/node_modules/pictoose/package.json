{
  "name": "pictoose",
  "version": "0.0.6",
  "description": "Pictures in Mongoose!",
  "main": "pictoose.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://Sirikon@github.com/Sirikon/Pictoose.git"
  },
  "author": {
    "name": "Sirikon"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Sirikon/Pictoose/issues"
  },
  "homepage": "https://github.com/Sirikon/Pictoose",
  "dependencies": {
    "express": "4.x.x",
    "mongoose": "3.8.x",
    "imagemagick-native": "1.2.x"
  },
  "optionalDependencies": {
    "imagemagick-native": "1.2.x"
  },
  "devDependencies": {
    "multer": "0.1.x",
    "body-parser": "1.6.x"
  },
  "readme": "Pictoose\n========\n[![Pictoose on NPM](http://img.shields.io/npm/v/pictoose.svg)](https://www.npmjs.org/package/pictoose)\n[![Pictoose downloads](http://img.shields.io/npm/dm/pictoose.svg)](https://www.npmjs.org/package/pictoose)\n\nPictoose is a Mongoose plugin made for make image storage (and video!) easiest possible\n\nNow with image resizing\n\n## How to use it ##\nLets supose that you actually have this code:\n\n```javascript\n// Requirements\nvar express \t= require('express');\nvar multer \t\t= require('multer');\nvar mongoose \t= require('mongoose');\nvar Schema \t\t= mongoose.Schema;\n// Create Express Server\nvar app = express();\napp.use(multer({dest: './uploads/'}));\n// Connect to database\nmongoose.connect('mongodb://localhost/testpictoose');\n\n// Car Schema & Model\nvar CarSchema = new Schema({\n\tmodel: String,\n})\nvar Car = mongoose.model('Car', CarSchema);\n\n...\n\napp.listen(3000);\nconsole.log('Listening on port 3000');\n```\n\nTo use Pictoose all you need to do is require de module, configure it and include the plugin to a Schema by this way:\n\n```javascript\nvar Pictoose\t= require('pictoose');\n\nPictoose.Config('RESOURCE_STORAGE_ROOT', './public/');\nPictoose.Config('RESOURCE_STORAGE_URL', 'http://127.0.0.1:3000/public/');\nPictoose.Config('RESOURCE_MAIN_URL', 'http://127.0.0.1:3000/resources/');\n\nCarSchema.plugin(Pictoose.Plugin, ['thumbnail','brand']);\n\napp.use('/public',express.static('./public'));\napp.get('/resources/:resid', Pictoose.RouteController);\n```\n\nNow every image will be stored in the 'public' folder (RESOURCE\\_STORAGE\\_ROOT), Pictoose will construct the URLs using the RESOURCE\\_STORAGE\\_URL to return de images.\n\nAlso you need to specify a RESOURCE\\_MAIN\\_URL used to handle broken links, resizing, etc. and add it to your Express routing.\n\nAnd finally, will create the fields 'thumbnail' and 'brand', so to save an image with Pictoose al you need to do is this:\n\n```javascript\napp.post('/', function(req,res){\n\tvar myCar = new Car(req.body);\n\t// Just save the image's local URI after it was uploaded and saved by, in this case, Multer\n\tmyCar.thumbnail = req.files.thumbnail.path;\n\tmyCar.brand = req.files.brand.path;\n\tmyCar.save();\n\tres.send('ok');\n});\n```\n\nYou can also use a base64 string or a public URL to store images\n\n```javascript\napp.post('/', function(req,res){\n\tvar muCar = new Car(req.body);\n\tmyCar.thumbnail = req.body.thumbnail; // (data:image/png;base64,...)\n\tmyCar.brand = 'http://anotherserver.com/image.png';\n\tmyCar.save();\n\tres.send('ok');\n});\n```\n\nWhen Pictoose receives a new image/video in base64/filepath, it will validate the file.\n\nSupported file formats:\n\n * png\n * jpg\n * jpeg\n * gif\n * png\n * bmp\n * webp\n * mp4\n * avi\n * mov\n * mpeg\n\nIf Pictoose receives a public URL will not validate anything and will directly store the URL\n\nThat's all!\n\n## Image Resizing ##\n\nImage resizing is simple, if we have the following URL generated and stored by Pictoose:\n```\nhttp://127.0.0.1:3000/resources/d8fbd233ac9deee7046841f02fb313ed.jpg\n```\nAnd we add this query:\n```\nhttp://127.0.0.1:3000/resources/d8fbd233ac9deee7046841f02fb313ed.jpg?resize=200x300afit\n```\nWill resize the image, store it in his new size, and return the public URL of the new image, the next time we query the same resize options, the image will be already resized and stored.\n\nResize options are: widthxheight(fill|afit|afil)\n\n## License ##\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "pictoose@0.0.6",
  "_from": "pictoose@0.0.6"
}
