{
  "name": "http-proxy-middleware",
  "version": "0.9.1",
  "description": "The one-liner node.js proxy middleware for connect, express and browser-sync",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec",
    "cover": "rm -rf coverage && istanbul cover ./node_modules/mocha/bin/_mocha",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && istanbul-coveralls && rm -rf coverage"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/chimurai/http-proxy-middleware.git"
  },
  "keywords": [
    "reverse",
    "proxy",
    "middleware",
    "http",
    "https",
    "connect",
    "express",
    "browser-sync",
    "gulp",
    "grunt-contrib-connect",
    "websocket",
    "ws",
    "cors"
  ],
  "author": {
    "name": "Steven Chim"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/chimurai/http-proxy-middleware/issues"
  },
  "homepage": "https://github.com/chimurai/http-proxy-middleware",
  "devDependencies": {
    "browser-sync": "^2.11.0",
    "chai": "^3.4.1",
    "connect": "^3.4.0",
    "coveralls": "^2.11.6",
    "express": "^4.13.3",
    "istanbul": "^0.4.1",
    "istanbul-coveralls": "^1.0.3",
    "mocha": "^2.3.4",
    "mocha-lcov-reporter": "1.0.0",
    "ws": "^1.0.1"
  },
  "dependencies": {
    "http-proxy": "^1.12.0",
    "is-glob": "^2.0.1",
    "lodash": "^3.10.1",
    "micromatch": "^2.3.7"
  },
  "readme": "# http-proxy-middleware\n\n[![Build Status](https://img.shields.io/travis/chimurai/http-proxy-middleware/master.svg?style=flat-square)](https://travis-ci.org/chimurai/http-proxy-middleware)\n[![Coveralls](https://img.shields.io/coveralls/chimurai/http-proxy-middleware.svg?style=flat-square)](https://coveralls.io/r/chimurai/http-proxy-middleware)\n[![dependency Status](https://img.shields.io/david/chimurai/http-proxy-middleware.svg?style=flat-square)](https://david-dm.org/chimurai/http-proxy-middleware#info=dependencies)\n[![devDependency Status](https://img.shields.io/david/dev/chimurai/http-proxy-middleware.svg?style=flat-square)](https://david-dm.org/chimurai/http-proxy-middleware#info=devDependencies)\n\nNode.js proxying made simple. Configure proxy middleware with ease for [connect](https://github.com/senchalabs/connect), [express](https://github.com/strongloop/express) and [browser-sync](https://github.com/BrowserSync/browser-sync).\n\nPowered by the popular Nodejitsu [`http-proxy`](https://github.com/nodejitsu/node-http-proxy). [![GitHub stars](https://img.shields.io/github/stars/nodejitsu/node-http-proxy.svg?style=social&label=Star)](https://github.com/nodejitsu/node-http-proxy)\n\n## Install\n\n```javascript\n$ npm install --save-dev http-proxy-middleware\n```\n\n## Core concept\n\nConfigure the proxy middleware.\n```javascript\nvar proxyMiddleware = require('http-proxy-middleware');\n\nvar proxy = proxyMiddleware('/api', {target: 'http://www.example.org'});\n//                          \\____/  \\________________________________/\n//                            |                     |\n//                          context              options\n\n// 'proxy' is now ready to be used in a server.\n```\n* **context**: matches provided context against request-urls' **path**.\n    Matching requests will be proxied to the target host.\n    Example: `'/api'` or `['/api', '/ajax']`. (more about [context matching](#context-matching))\n* **options.target**: target host to proxy to.\n    Check out available [proxy middleware options](#options).\n\n``` javascript\n// shorthand syntax for the example above:\nvar proxy = proxyMiddleware('http://www.example.org/api');\n\n```\nMore about the [shorthand configuration](#shorthand).\n\n## Example\n\nAn example with express server.\n```javascript\n// include dependencies\nvar express = require('express');\nvar proxyMiddleware = require('http-proxy-middleware');\n\n// configure proxy middleware context\nvar context = '/api';                     // requests with this path will be proxied\n\n// configure proxy middleware options\nvar options = {\n        target: 'http://www.example.org', // target host\n        changeOrigin: true,               // needed for virtual hosted sites\n        ws: true,                         // proxy websockets\n        pathRewrite: {\n            '^/old/api' : '/new/api'      // rewrite paths\n        },\n        proxyTable: {\n            // when request.headers.host == 'dev.localhost:3000',\n            // override target 'http://www.example.org' to 'http://localhost:8000'\n            'dev.localhost:3000' : 'http://localhost:8000'\n        }\n    };\n\n// create the proxy\nvar proxy = proxyMiddleware(context, options);\n\n// use the configured `proxy` in web server\nvar app = express();\n    app.use(proxy);\n    app.listen(3000);\n```\n\nCheck out [working  examples](#more-examples).\n\n**Tip:** For [name-based virtual hosted sites](http://en.wikipedia.org/wiki/Virtual_hosting#Name-based), you'll need to use the option `changeOrigin` and set it to `true`.\n\n## Context matching\n\nhttp-proxy-middleware offers several ways to decide which requests should be proxied.\nRequest URL's [ _path-absolute_ and _query_](https://tools.ietf.org/html/rfc3986#section-3) will be used for context matching .\n\n* **path matching**\n    - `'/'` - matches any path, all requests will be proxied.\n    - `'/api'` - matches paths starting with `/api`\n\n* **multiple path matching**\n    - `['/api', '/ajax', '/someotherpath']`\n\n* **wildcard path matching**\n    For fine-grained control you can use wildcard matching. Glob pattern matching is done by _micromatch_. Visit [micromatch](https://www.npmjs.com/package/micromatch) or [glob](https://www.npmjs.com/package/glob) for more globbing examples.\n    - `'**'` matches any path, all requests will be proxied.\n    - `'**/*.html'` matches any path which ends with `.html`\n    - `'/*.html'` matches paths directly under path-absolute\n    - `'/api/**/*.html'` matches requests ending with `.html` in the path of `/api`\n    - `['/api/**', '/ajax/**']` combine multiple patterns\n    - `['/api/**', '!**/bad.json']` exclusion\n\n## Shorthand\n\nUse the shorthand syntax when verbose configuration is not needed. The `context` and `option.target` will be automatically configured when shorthand is used. Options can still be used if needed.\n\n```javascript\nproxyMiddleware('http://www.example.org:8000/api');\n// proxyMiddleware('/api', {target: 'http://www.example.org:8000'});\n\n\nproxyMiddleware('http://www.example.org:8000/api/books/*/**.json');\n// proxyMiddleware('/api/books/*/**.json', {target: 'http://www.example.org:8000'});\n\n\nproxyMiddleware('http://www.example.org:8000/api', {changeOrigin:true});\n// proxyMiddleware('/api', {target: 'http://www.example.org:8000', changeOrigin: true});\n```\n\n## WebSocket\n\n```javascript\n// verbose api\nproxyMiddleware('/', {target:'http://echo.websocket.org', ws:true});\n\n// shorthand\nproxyMiddleware('http://echo.websocket.org', {ws:true});\n\n// shorter shorthand\nproxyMiddleware('ws://echo.websocket.org');\n```\n\n### External WebSocket upgrade\n\nIn the previous WebSocket examples, http-proxy-middleware relies on a initial http request in order to listen to the http `upgrade` event. If you need to proxy WebSockets without the initial http request, you can subscribe to the server's http `upgrade` event manually.\n```javascript\nvar proxy = proxyMiddleware('ws://echo.websocket.org', {changeOrigin:true});\n\nvar app = express();\n    app.use(proxy);\n\nvar server = app.listen(3000);\n    server.on('upgrade', proxy.upgrade);    // <-- subscribe to http 'upgrade'\n```\n\n## Options\n\n*  **option.pathRewrite**: object, rewrite target's url path. Object-keys will be used as _RegExp_ to match paths.\n    ```javascript\n    {\n        \"^/old/api\" : \"/new/api\",    // rewrite path\n        \"^/remove/api\" : \"\"          // remove path\n    }\n    ```\n\n* **option.proxyTable**: object, re-target `option.target` based on the request header `host` parameter. `host` can be used in conjunction with `path`. Only one instance of the proxy will be used. The order of the configuration matters.\n    ```javascript\n    {\n        \"integration.localhost:3000\" : \"http://localhost:8001\",    // host only\n        \"staging.localhost:3000\"     : \"http://localhost:8002\",    // host only\n        \"localhost:3000/api\"         : \"http://localhost:8003\",    // host + path\n        \"/rest\"                      : \"http://localhost:8004\"     // path only\n    }\n    ```\n\n*  **option.logLevel**: string, ['debug', 'info', 'warn', 'error', 'silent']. Default: 'info'\n\n*  **option.logProvider**: function, modify or replace log provider. Default: `console`.\n    ```javascript\n    // simple replace\n    function logProvider(provider) {\n        // replace the default console log provider.\n        return require('winston');\n    }\n    ```\n\n    ```javascript\n    // verbose replacement\n    function logProvider(provider) {\n        var logger = new (require('winston').Logger)();\n\n        var myCustomProvider = {\n            log: logger.log,\n            debug: logger.debug,\n            info: logger.info,\n            warn: logger.warn,\n            error: logger.error\n        }\n        return myCustomProvider;\n    }\n    ```\n\n*  **option.onError**: function, subscribe to http-proxy's error event for custom error handling.\n    ```javascript\n    function onError(err, req, res) {\n        res.writeHead(500, {\n            'Content-Type': 'text/plain'\n        });\n        res.end('Something went wrong. And we are reporting a custom error message.');\n    }\n    ```\n\n*  **option.onProxyRes**: function, subscribe to http-proxy's proxyRes event.\n    ```javascript\n    function onProxyRes(proxyRes, req, res) {\n        proxyRes.headers['x-added'] = 'foobar';     // add new header to response\n        delete proxyRes.headers['x-removed'];       // remove header from response\n    }\n    ```\n\n*  **option.onProxyReq**: function, subscribe to http-proxy's proxyReq event.\n    ```javascript\n    function onProxyReq(proxyReq, req, res) {\n        // add custom header to request\n        proxyReq.setHeader('x-added', 'foobar');\n        // or log the req\n    }\n    ```\n\n* (DEPRECATED) **option.proxyHost**: Use `option.changeOrigin = true` instead.\n\nThe following options are provided by the underlying [http-proxy](https://www.npmjs.com/package/http-proxy).\n\n*  **option.target**: url string to be parsed with the url module\n*  **option.forward**: url string to be parsed with the url module\n*  **option.agent**: object to be passed to http(s).request (see Node's [https agent](http://nodejs.org/api/https.html#https_class_https_agent) and [http agent](http://nodejs.org/api/http.html#http_class_http_agent) objects)\n*  **option.ssl**: object to be passed to https.createServer()\n*  **option.ws**: true/false: if you want to proxy websockets\n*  **option.xfwd**: true/false, adds x-forward headers\n*  **option.secure**: true/false, if you want to verify the SSL Certs\n*  **option.toProxy**: passes the absolute URL as the `path` (useful for proxying to proxies)\n*  **option.prependPath**: true/false, Default: true - specify whether you want to prepend the target's path to the proxy path>\n*  **option.ignorePath**: true/false, Default: false - specify whether you want to ignore the proxy path of the incoming request>\n*  **option.localAddress** : Local interface string to bind for outgoing connections\n*  **option.changeOrigin**: true/false, adds host to request header.\n*  **option.auth** : Basic authentication i.e. 'user:password' to compute an Authorization header.\n*  **option.hostRewrite**: rewrites the location hostname on (301/302/307/308) redirects.\n*  **option.autoRewrite**: rewrites the location host/port on (301/302/307/308) redirects based on requested host/port. Default: false.\n*  **option.protocolRewrite**: rewrites the location protocol on (301/302/307/308) redirects to 'http' or 'https'. Default: null.\n\nUndocumented options are provided by the underlying http-proxy\n*  **option.headers**: object, adds [request headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields). (Example: `{host:'www.example.org'}`) [source](https://github.com/nodejitsu/node-http-proxy/blob/master/examples/http/proxy-http-to-https.js#L41)\n\n## Recipes\n\nView the [recipes](https://github.com/chimurai/http-proxy-middleware/tree/master/recipes) for common use cases.\n\n## More Examples\n\n  To run and view the [proxy examples](https://github.com/chimurai/http-proxy-middleware/tree/master/examples), clone the http-proxy-middleware repo and install the dependencies:\n\n```bash\n$ git clone https://github.com/chimurai/http-proxy-middleware.git\n$ cd http-proxy-middleware\n$ npm install\n```\n\n  Run the example:\n\n```bash\n$ node examples/connect\n```\n\n  Or just explore the proxy examples' sources:\n* `examples/connect` - [connect proxy example](https://github.com/chimurai/http-proxy-middleware/tree/master/examples/connect/index.js)\n* `examples/express` - [express proxy example](https://github.com/chimurai/http-proxy-middleware/tree/master/examples/express/index.js)\n* `examples/browser-sync` - [browser-sync proxy example](https://github.com/chimurai/http-proxy-middleware/tree/master/examples/browser-sync/index.js)\n* `examples/websocket` - [websocket proxy example](https://github.com/chimurai/http-proxy-middleware/tree/master/examples/websocket/index.js) with express\n\n## Compatible servers\n\nhttp-proxy-middleware is compatible with the following servers:\n* [connect](https://www.npmjs.com/package/connect)\n* [express](https://www.npmjs.com/package/express)\n* [browser-sync](https://www.npmjs.com/package/browser-sync)\n\n## Tests\n\n  To run the test suite, first install the dependencies, then run:\n\n```bash\n# install dependencies\n$ npm install\n\n# unit tests\n$ npm test\n\n# code coverage\n$ npm run cover\n```\n\n## Changelog\n\n- [View changelog](https://github.com/chimurai/http-proxy-middleware/blob/master/CHANGELOG.md)\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Steven Chim\n",
  "readmeFilename": "README.md",
  "_id": "http-proxy-middleware@0.9.1",
  "_from": "http-proxy-middleware@~0.9.0"
}
